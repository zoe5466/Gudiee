// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用戶相關模型
model User {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String    @unique
  passwordHash     String    @map("password_hash")
  name             String
  avatar           String?
  phone            String?
  role             UserRole  @default(CUSTOMER)
  isEmailVerified  Boolean   @default(false) @map("is_email_verified")
  isKycVerified    Boolean   @default(false) @map("is_kyc_verified")
  permissions      Json      @default("[]")
  profile          Json?
  settings         Json      @default("{}")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // 關聯
  userProfile          UserProfile?
  guidedServices       Service[]           @relation("GuideServices")
  bookingsAsGuide      Booking[]           @relation("GuideBookings")
  bookingsAsTraveler   Booking[]           @relation("TravelerBookings")
  paymentsAsUser       Payment[]
  reviewsAsReviewer    Review[]            @relation("ReviewerReviews")
  reviewsAsGuide       Review[]            @relation("GuideReviews")
  reviewResponses      ReviewResponse[]
  reviewHelpful        ReviewHelpful[]
  sentMessages         Message[]
  readStatuses         MessageReadStatus[]
  notifications        Notification[]
  pushSubscriptions    PushSubscription[]
  cmsContents          CmsContent[]
  supportTickets       SupportTicket[]
  adminReplies         SupportReply[]      @relation("AdminReplies")

  @@map("users")
}

model UserProfile {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String   @unique @map("user_id") @db.Uuid
  bio               String?
  location          String?
  languages         String[]
  specialties       String[]
  experienceYears   Int?     @map("experience_years")
  certifications    Json     @default("[]")
  socialLinks       Json     @default("{}") @map("social_links")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// 服務相關模型
model ServiceCategory {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String             @unique
  description String?
  icon        String?
  parentId    String?            @map("parent_id") @db.Uuid
  sortOrder   Int                @default(0) @map("sort_order")
  isActive    Boolean            @default(true) @map("is_active")
  createdAt   DateTime           @default(now()) @map("created_at")

  parent   ServiceCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ServiceCategory[] @relation("CategoryHierarchy")
  services Service[]

  @@map("service_categories")
}

model Service {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guideId             String        @map("guide_id") @db.Uuid
  title               String
  description         String
  shortDescription    String?       @map("short_description")
  categoryId          String?       @map("category_id") @db.Uuid
  location            String
  coordinates         String?       // Stored as "lat,lng" string for simplicity
  price               Decimal       @db.Decimal(10, 2)
  currency            String        @default("TWD")
  durationHours       Int           @map("duration_hours")
  maxGuests           Int           @map("max_guests")
  minGuests           Int           @default(1) @map("min_guests")
  images              String[]
  highlights          String[]
  included            String[]
  notIncluded         String[]      @map("not_included")
  cancellationPolicy  String?       @map("cancellation_policy")
  status              ServiceStatus @default(ACTIVE)
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  guide        User                  @relation("GuideServices", fields: [guideId], references: [id], onDelete: Cascade)
  category     ServiceCategory?      @relation(fields: [categoryId], references: [id])
  availability ServiceAvailability[]
  bookings     Booking[]
  reviews      Review[]

  @@map("services")
}

model ServiceAvailability {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId       String   @map("service_id") @db.Uuid
  date            DateTime @db.Date
  startTime       DateTime @map("start_time") @db.Time
  endTime         DateTime @map("end_time") @db.Time
  isAvailable     Boolean  @default(true) @map("is_available")
  maxBookings     Int      @default(1) @map("max_bookings")
  currentBookings Int      @default(0) @map("current_bookings")
  createdAt       DateTime @default(now()) @map("created_at")

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, date, startTime])
  @@map("service_availability")
}

// 預訂相關模型
model Booking {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId           String        @map("service_id") @db.Uuid
  guideId             String        @map("guide_id") @db.Uuid
  travelerId          String        @map("traveler_id") @db.Uuid
  status              BookingStatus @default(PENDING)
  bookingDate         DateTime      @map("booking_date") @db.Date
  startTime           DateTime      @map("start_time") @db.Time
  endTime             DateTime?     @map("end_time") @db.Time
  guests              Int
  durationHours       Int           @map("duration_hours")
  basePrice           Decimal       @map("base_price") @db.Decimal(10, 2)
  serviceFee          Decimal       @map("service_fee") @db.Decimal(10, 2)
  totalAmount         Decimal       @map("total_amount") @db.Decimal(10, 2)
  currency            String        @default("TWD")
  specialRequests     String?       @map("special_requests")
  contactInfo         Json          @map("contact_info")
  paymentStatus       PaymentStatus @default(PENDING) @map("payment_status")
  paymentIntentId     String?       @map("payment_intent_id")
  cancelledAt         DateTime?     @map("cancelled_at")
  cancelledBy         String?       @map("cancelled_by") @db.Uuid
  cancellationReason  String?       @map("cancellation_reason")
  completedAt         DateTime?     @map("completed_at")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  service  Service   @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  guide    User      @relation("GuideBookings", fields: [guideId], references: [id], onDelete: Restrict)
  traveler User      @relation("TravelerBookings", fields: [travelerId], references: [id], onDelete: Restrict)
  payments Payment[]
  reviews  Review[]

  @@map("bookings")
}

model Payment {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId           String        @map("booking_id") @db.Uuid
  userId              String        @map("user_id") @db.Uuid
  paymentMethod       PaymentMethod @map("payment_method")
  paymentProvider     String        @map("payment_provider")
  providerPaymentId   String?       @map("provider_payment_id")
  amount              Decimal       @db.Decimal(10, 2)
  currency            String
  status              PaymentStatus
  metadata            Json          @default("{}")
  processedAt         DateTime?     @map("processed_at")
  refundedAt          DateTime?     @map("refunded_at")
  refundAmount        Decimal?      @map("refund_amount") @db.Decimal(10, 2)
  createdAt           DateTime      @default(now()) @map("created_at")

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  user    User    @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("payments")
}

// 評論相關模型
model Review {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId    String       @map("booking_id") @db.Uuid
  serviceId    String       @map("service_id") @db.Uuid
  guideId      String       @map("guide_id") @db.Uuid
  reviewerId   String       @map("reviewer_id") @db.Uuid
  rating       Int          @db.SmallInt
  comment      String
  photos       String[]
  pros         String[]
  cons         String[]
  tags         String[]
  isVerified   Boolean      @default(false) @map("is_verified")
  isAnonymous  Boolean      @default(false) @map("is_anonymous")
  helpfulCount Int          @default(0) @map("helpful_count")
  reportCount  Int          @default(0) @map("report_count")
  status       ReviewStatus @default(PENDING)
  moderatedAt  DateTime?    @map("moderated_at")
  moderatedBy  String?      @map("moderated_by") @db.Uuid
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  booking   Booking            @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  guide     User               @relation("GuideReviews", fields: [guideId], references: [id], onDelete: Cascade)
  reviewer  User               @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  responses ReviewResponse[]
  helpful   ReviewHelpful[]

  @@map("reviews")
}

model ReviewResponse {
  id         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reviewId   String             @map("review_id") @db.Uuid
  authorId   String             @map("author_id") @db.Uuid
  authorType ResponseAuthorType @map("author_type")
  content    String
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("review_responses")
}

model ReviewHelpful {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reviewId  String   @map("review_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@map("review_helpful")
}

// 聊天通訊模型
model Conversation {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type             ConversationType @default(DIRECT)
  participants     String[]         @db.Uuid
  title            String?
  lastMessageId    String?          @map("last_message_id") @db.Uuid
  lastActivityAt   DateTime         @default(now()) @map("last_activity_at")
  metadata         Json             @default("{}")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  messages Message[]

  @@map("conversations")
}

model Message {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String      @map("conversation_id") @db.Uuid
  senderId       String      @map("sender_id") @db.Uuid
  content        String?
  messageType    MessageType @default(TEXT) @map("message_type")
  attachments    Json        @default("[]")
  metadata       Json        @default("{}")
  isRead         Boolean     @default(false) @map("is_read")
  isDeleted      Boolean     @default(false) @map("is_deleted")
  replyToId      String?     @map("reply_to_id") @db.Uuid
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  conversation Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User                @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo      Message?            @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]           @relation("MessageReplies")
  readStatuses MessageReadStatus[]

  @@map("messages")
}

model MessageReadStatus {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  messageId String   @map("message_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  readAt    DateTime @default(now()) @map("read_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_status")
}

// 通知系統模型
model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @map("user_id") @db.Uuid
  type      NotificationType
  title     String
  content   String
  data      Json             @default("{}")
  isRead    Boolean          @default(false) @map("is_read")
  readAt    DateTime?        @map("read_at")
  actionUrl String?          @map("action_url")
  expiresAt DateTime?        @map("expires_at")
  createdAt DateTime         @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PushSubscription {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  endpoint   String
  p256dhKey  String   @map("p256dh_key")
  authKey    String   @map("auth_key")
  userAgent  String?  @map("user_agent")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  lastUsedAt DateTime @default(now()) @map("last_used_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

// 客服支援模型
model SupportTicket {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String            @map("user_id") @db.Uuid
  message   String
  category  SupportCategory   @default(GENERAL)
  priority  SupportPriority   @default(NORMAL)
  status    SupportStatus     @default(SENT)
  archived  Boolean           @default(false)
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies SupportReply[]

  @@map("support_tickets")
}

model SupportReply {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketId  String   @map("ticket_id") @db.Uuid
  adminId   String   @map("admin_id") @db.Uuid
  message   String
  createdAt DateTime @default(now()) @map("created_at")

  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  admin  User          @relation("AdminReplies", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("support_replies")
}

// 內容管理模型
model CmsContent {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          ContentType
  slug          String        @unique
  title         String
  content       String
  excerpt       String?
  featuredImage String?       @map("featured_image")
  metadata      Json          @default("{}")
  status        ContentStatus @default(DRAFT)
  publishedAt   DateTime?     @map("published_at")
  authorId      String?       @map("author_id") @db.Uuid
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  author User? @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map("cms_contents")
}

// 枚舉類型
enum UserRole {
  CUSTOMER @map("customer")
  GUIDE    @map("guide")
  ADMIN    @map("admin")
}

enum ServiceStatus {
  DRAFT     @map("draft")
  ACTIVE    @map("active")
  INACTIVE  @map("inactive")
  SUSPENDED @map("suspended")
}

enum BookingStatus {
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")
  COMPLETED @map("completed")
  REFUNDED  @map("refunded")
}

enum PaymentStatus {
  PENDING    @map("pending")
  PROCESSING @map("processing")
  COMPLETED  @map("completed")
  FAILED     @map("failed")
  REFUNDED   @map("refunded")
}

enum PaymentMethod {
  CREDIT_CARD   @map("credit_card")
  DEBIT_CARD    @map("debit_card")
  PAYPAL        @map("paypal")
  BANK_TRANSFER @map("bank_transfer")
  APPLE_PAY     @map("apple_pay")
  GOOGLE_PAY    @map("google_pay")
}

enum ReviewStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
  HIDDEN   @map("hidden")
}

enum ResponseAuthorType {
  GUIDE @map("guide")
  ADMIN @map("admin")
}

enum ConversationType {
  DIRECT           @map("direct")
  GROUP            @map("group")
  CUSTOMER_SUPPORT @map("customer_support")
}

enum MessageType {
  TEXT     @map("text")
  IMAGE    @map("image")
  FILE     @map("file")
  LOCATION @map("location")
  SYSTEM   @map("system")
}

enum NotificationType {
  BOOKING_CREATED      @map("booking_created")
  BOOKING_CONFIRMED    @map("booking_confirmed")
  BOOKING_CANCELLED    @map("booking_cancelled")
  PAYMENT_COMPLETED    @map("payment_completed")
  REVIEW_RECEIVED      @map("review_received")
  MESSAGE_RECEIVED     @map("message_received")
  SYSTEM_ANNOUNCEMENT  @map("system_announcement")
  PROMOTIONAL          @map("promotional")
}

enum ContentType {
  PAGE         @map("page")
  ARTICLE      @map("article")
  ANNOUNCEMENT @map("announcement")
  FAQ          @map("faq")
}

enum ContentStatus {
  DRAFT     @map("draft")
  PUBLISHED @map("published")
  ARCHIVED  @map("archived")
}

enum SupportCategory {
  GENERAL   @map("general")
  BOOKING   @map("booking")
  PAYMENT   @map("payment")
  COMPLAINT @map("complaint")
  FEEDBACK  @map("feedback")
}

enum SupportPriority {
  LOW    @map("low")
  NORMAL @map("normal")
  HIGH   @map("high")
  URGENT @map("urgent")
}

enum SupportStatus {
  SENT    @map("sent")
  READ    @map("read")
  REPLIED @map("replied")
}